{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._statistic_build_ = void 0;\nexports[\"default\"] = statisticToken;\nexports.merge = merge;\nexports.statistic = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nvar recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nfunction merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return _extends2[\"default\"].apply(void 0, [{}].concat(objs));\n  }\n  recording = false;\n  var ret = {};\n  objs.forEach(function (obj) {\n    var keys = Object.keys(obj);\n    keys.forEach(function (key) {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: function get() {\n          return obj[key];\n        }\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @private Internal Usage. Not use in your production. */\nvar statistic = {};\n/** @private Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexports.statistic = statistic;\nvar _statistic_build_ = {};\n/* istanbul ignore next */\nexports._statistic_build_ = _statistic_build_;\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nfunction statisticToken(token) {\n  var tokenKeys;\n  var proxy = token;\n  var flush = noop;\n  if (enableStatistic) {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get: function get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = function flush(componentName, componentToken) {\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: componentToken\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush: flush\n  };\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_statistic_build_","statisticToken","merge","statistic","_extends2","enableStatistic","process","env","NODE_ENV","CSSINJS_STATISTIC","recording","_len","arguments","length","objs","Array","_key","apply","concat","ret","forEach","obj","keys","key","configurable","enumerable","get","noop","token","tokenKeys","proxy","flush","Set","Proxy","prop","add","componentName","componentToken","global","from","component"],"sources":["C:/Users/nayaz/OneDrive/Desktop/FullStack/ResumeDeploymentprojects/expensetracker/client/node_modules/antd/lib/theme/util/statistic.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._statistic_build_ = void 0;\nexports[\"default\"] = statisticToken;\nexports.merge = merge;\nexports.statistic = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nvar recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nfunction merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return _extends2[\"default\"].apply(void 0, [{}].concat(objs));\n  }\n  recording = false;\n  var ret = {};\n  objs.forEach(function (obj) {\n    var keys = Object.keys(obj);\n    keys.forEach(function (key) {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: function get() {\n          return obj[key];\n        }\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @private Internal Usage. Not use in your production. */\nvar statistic = {};\n/** @private Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexports.statistic = statistic;\nvar _statistic_build_ = {};\n/* istanbul ignore next */\nexports._statistic_build_ = _statistic_build_;\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nfunction statisticToken(token) {\n  var tokenKeys;\n  var proxy = token;\n  var flush = noop;\n  if (enableStatistic) {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get: function get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = function flush(componentName, componentToken) {\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: componentToken\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush: flush\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}